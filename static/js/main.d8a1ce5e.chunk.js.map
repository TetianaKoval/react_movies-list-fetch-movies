{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAddMovieToList","useState","value","setValue","isLoading","setIsLoading","findMovie","setFindMovie","movieIsError","setMovieIsError","loadMovie","useCallback","a","movieFromServer","normalizeMovie","Title","Plot","Poster","imdbID","useEffect","method","onSubmit","event","preventDefault","length","htmlFor","type","id","placeholder","onChange","target","classNames","disabled","onClick","find","App","setMovies","addMovieToMovies","prevState","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8a1ce5e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=78f07b10';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n} from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { ResponseError } from '../../types/ReponseError';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\n\ntype Props = {\n  movies:Movie[];\n  onAddMovieToList: (query:Movie | null) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  movies,\n  onAddMovieToList,\n}) => {\n  const [value, setValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [findMovie, setFindMovie] = useState<MovieData | null>(null);\n  const [movieIsError, setMovieIsError] = useState<ResponseError | null>(null);\n\n  const loadMovie = useCallback(\n    async (query) => {\n      setIsLoading(true);\n      try {\n        const movieFromServer = await getMovie(query);\n\n        setIsLoading(false);\n        if ('Error' in movieFromServer) {\n          setMovieIsError(movieFromServer);\n        } else {\n          setFindMovie(movieFromServer);\n        }\n      } catch {\n        setMovieIsError(null);\n      } finally {\n        setIsLoading(false);\n      }\n    }, [],\n  );\n\n  const normalizeMovie = useCallback(\n    (movie:MovieData) => {\n      return (\n        {\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : movie.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n          imdbId: movie.imdbID,\n        }\n      );\n    }, [],\n  );\n\n  useEffect(() => {\n    if (movieIsError && movieIsError.Response === 'False') {\n      setMovieIsError(null);\n    }\n  }, [value]);\n\n  return (\n    <>\n      <form\n        method=\"get\"\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          if (value.length > 0) {\n            loadMovie(value);\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={value}\n              onChange={(event) => setValue(event.target.value)}\n            />\n          </div>\n          {movieIsError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={value.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n          {findMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  const movieInList = movies\n                    .find(movie => movie.imdbId === findMovie.imdbID);\n\n                  if (movieInList) {\n                    onAddMovieToList(normalizeMovie(findMovie));\n                  }\n\n                  setFindMovie(null);\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {findMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={normalizeMovie(findMovie)} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovieToMovies = useCallback(\n    (movie:Movie | null) => {\n      if (movie) {\n        setMovies((prevState) => [...prevState, movie]);\n      }\n    }, [],\n  );\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          onAddMovieToList={\n            (newMovie:Movie | null) => addMovieToMovies(newMovie)\n          }\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}